#!/bin/bash

set -e
rm -rf /tmp/$LOGNAME
if [ "$RAMDISK_DIR" == "" ]; then
  RAMDISK_DIR="/tmp/$LOGNAME/ramdisk"
  mkdir -p $RAMDISK_DIR
  echo "RAMDISK_DIR set to $RAMDISK_DIR"
else
  echo "RAMDISK_DIR already exists at $RAMDISK_DIR"
fi

# if the ramdisk dir does not already exist, then create a ramdisk!
if [ ! -d "$RAMDISK_DIR" ]; then
  chmod 777 "$RAMDISK_DIR"
  sudo mount -t tmpfs -o size=10G tmpfs "$RAMDISK_DIR"
fi

if [ "$CONDA_DIR" == "" ]; then
  CONDA_DIR="$RAMDISK_DIR/mc"
fi
if [ ! -d "$CONDA_DIR" ]; then
  # check and if we have a miniconda bash script available and run it if we do
  find ~/Downloads -iname *miniconda* -print | head -n 1 | xargs -I {} bash {} -b -p $CONDA_DIR
  # if conda dir still doesn't exist, download and install
  if [ ! -d "$CONDA_DIR" ]; then
    MC_PATH=/tmp/$LOGNAME/miniconda.sh
    echo Dowloading miniconda to $MC_PATH
    wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $MC_PATH
    bash "$MC_PATH" -b -p "$CONDA_DIR"
  fi
fi
# add some setup/teardown scripts
mkdir -p $CONDA_DIR/etc/conda/activate.d
echo "source $RAMDISK_DIR/.condabuildrc
mkdir -p ~/.config/binstar
echo 'url: https://pergamon.cs.nsls2.local:8443/api' > ~/.config/binstar/config.yaml" > $CONDA_DIR/etc/conda/activate.d/setup.sh
mkdir -p $CONDA_DIR/etc/conda/deactivate.d
echo "
unset RAMDISK_DIR
unset CONDA_DIR
unset CONDARC
unset HTTPS_PROXY
unset HTTP_PROXY
unset REQUESTS_CA_BUNDLE
unset BINSTAR_TOKEN
source ~/.bashrc" > $CONDA_DIR/etc/conda/deactivate.d/teardown.sh
# set up a condabuildrc file
echo "
export RAMDISK_DIR=$RAMDISK_DIR
export CONDA_DIR=$CONDA_DIR
export CONDARC=$RAMDISK_DIR/.condarc
export REQUESTS_CA_BUNDLE=/etc/certificates/ca_cs_nsls2_local.crt
export no_proxy=cs.nsls2.local
export HTTP_PROXY=http://proxy:8888
export HTTPS_PROXY=http://proxy:8888
export CONDA_NPY=1.10
" > "$RAMDISK_DIR/.condabuildrc"
# set up a custom condarc for the ramdisk env
echo "
channels:
- https://pergamon.cs.nsls2.local:8443/conda/nsls2-tag
- https://pergamon.cs.nsls2.local:8443/conda/anaconda
always_yes: true
show_channel_urls: true" > "$RAMDISK_DIR/.condarc"

# Init the logs
LOG_DIR=/home/edill/auto-build-logs/`date +%Y`/`date +%m`/`date +%d`
DEV_DIR=$LOG_DIR/dev
TAG_DIR=$LOG_DIR/tag
mkdir -p $LOG_DIR
mkdir -p $DEV_DIR
mkdir -p $TAG_DIR

logname=`date +%H.%M`
DEV_LOG="$DEV_DIR/$logname"
TAG_LOG="$TAG_DIR/$logname"

# init the conda directory
echo "CONDA_DIR=$CONDA_DIR"
source $CONDA_DIR/bin/activate $CONDA_DIR
conda install anaconda-client patchelf conda-build
conda remove conda-build anaconda-client --force
set +e
pip uninstall conda-build --yes
pip uninstall conda-build --yes
set -e
install ()
{
    url="https://github.com/$1"
    target="/tmp/$LOGNAME/$1"
    git clone $url /tmp/$LOGNAME/$1
    pushd $target
    if [ ! -z "$2" ]; then
      git checkout "$2"
    fi;
    python setup.py develop
    popd
}

echo "Install conda 4.0.4"
CONDA_DIR=/tmp/$LOGNAME/conda
rm -rf $CONDA_DIR
git clone https://github.com/conda/conda $CONDA_DIR
cd $CONDA_DIR
git checkout 4.0.4
pip uninstall conda --yes
CONDA_DEFAULT_ENV='' python setup.py install
# conda remove anaconda-client --yes

echo "Install a dev build of anaconda-client"
install anaconda-platform/anaconda-client 1.4.0
echo "Install a dev build of conda-build"
install conda/conda-build 1.20.1
echo "Install dev build of conda-build-all"
conda install mock --yes
install scitools/conda-build-all
echo "Install dev build of conda-build-utils"
install ericdill/conda-build-utils

run_dev_build () {
  # set up a custom condarc for the dev builds
  echo "
  channels:
  - https://pergamon.cs.nsls2.local:8443/conda/nsls2-dev
  - https://pergamon.cs.nsls2.local:8443/conda/nsls2-tag
  - https://pergamon.cs.nsls2.local:8443/conda/anaconda
  always_yes: true
  show_channel_urls: true" > "$RAMDISK_DIR/.condarc"
  echo `date`
  # allow failures on the conda-build commands
  USERNAME=nsls2-dev
  rm -rf /tmp/$LOGNAME/staged-recipes-dev
  CLONE_DIR=/tmp/$LOGNAME/staged-recipes-dev
  rm -rf $CLONE_DIR

  git clone https://github.com/NSLS-II/staged-recipes-dev $CLONE_DIR

  build_from_yaml $CLONE_DIR/build-directive.yaml -u nsls2-dev
}


echo "
username: lightsource2
numpy:
  - '1.10'
  - '1.11'
sources:
  - url: https://github.com/nsls-ii/auto-build-tagged-recipes
    folders:
      - name: py3
        python:
          - 3.4
          - 3.5
" > /tmp/$LOGNAME/tag-build.yaml

run_tag_build() {
  # set up a custom condarc for the dev builds
  echo "
  channels:
  - https://pergamon.cs.nsls2.local:8443/conda/nsls2-tag
  - https://pergamon.cs.nsls2.local:8443/conda/anaconda
  always_yes: true
  show_channel_urls: true" > "$RAMDISK_DIR/.condarc"
  # run the tagged builds
  echo `date`
  USERNAME=nsls2-tag
  CLONE_DIR=/tmp/$LOGNAME/tagged-recipes
  rm -rf $CLONE_DIR
  git clone https://github.com/NSLS-II/auto-build-tagged-recipes $CLONE_DIR
  # CONDA_NPY=1.10 conda-build-all $CLONE_DIR/x.x --upload-channels $USERNAME --inspect-channels $USERNAME --matrix-conditions "python >=3.4"
  # # hack the upload because conda-build-all is *not* uploading for some reason...
  # anaconda upload -u $USERNAME --force $CONDA_DIR/conda-bld/linux-64/*.tar.bz2
  # now build most of the rest of the stack in one-shot
  CONDA_NPY=110 build_from_yaml /tmp/$LOGNAME/tag-build.yaml -u $USERNAME
}
#LOG=/tmp/build.log
run_tag_build |& tee -a $TAG_LOG
run_dev_build |& tee -a $DEV_LOG

echo "Removing download trash from logs"
sed '/% |/d' $DEV_LOG > /tmp/$LOGNAME/devlog
sed '/% |/d' $TAG_LOG > /tmp/$LOGNAME/taglog

echo "Emailing logs"
echo "Build status for $DATE
=============================================
DEV LOG SUMMARY

`cat $DEV_LOG.summary`

=============================================
TAG LOG SUMMARY
`cat $TAG_LOG.summary`
" | mutt -s "log test" edill@bnl.gov -y -a /tmp/$LOGNAME/devlog /tmp/$LOGNAME/taglog --
