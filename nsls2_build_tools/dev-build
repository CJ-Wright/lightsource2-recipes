#!/bin/bash

set -e
rm -rf /tmp/$LOGNAME
if [ "$RAMDISK_DIR" == "" ]; then
  RAMDISK_DIR="/tmp/$LOGNAME/ramdisk"
  mkdir -p $RAMDISK_DIR
  echo "RAMDISK_DIR set to $RAMDISK_DIR"
else
  echo "RAMDISK_DIR already exists at $RAMDISK_DIR"
fi

# if the ramdisk dir does not already exist, then create a ramdisk!
if [ ! -d "$RAMDISK_DIR" ]; then
  chmod 777 "$RAMDISK_DIR"
  sudo mount -t tmpfs -o size=10G tmpfs "$RAMDISK_DIR"
fi

if [ "$CONDA_DIR" == "" ]; then
  CONDA_DIR="$RAMDISK_DIR/mc"
fi
if [ ! -d "$CONDA_DIR" ]; then
  # check and if we have a miniconda bash script available and run it if we do
  find ~/Downloads -iname *miniconda* -print | head -n 1 | xargs -I {} bash {} -b -p $CONDA_DIR
  # if conda dir still doesn't exist, download and install
  if [ ! -d "$CONDA_DIR" ]; then
    MC_PATH=/tmp/miniconda.sh
    echo Dowloading miniconda to $MC_PATH
    wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $MC_PATH
    bash "$MC_PATH" -b -p "$CONDA_DIR"
  fi
fi
# add some setup/teardown scripts
mkdir -p $CONDA_DIR/etc/conda/activate.d
echo "source $RAMDISK_DIR/.condabuildrc
mkdir -p ~/.config/binstar
echo 'url: https://pergamon.cs.nsls2.local:8443/api' > ~/.config/binstar/config.yaml
" > $CONDA_DIR/etc/conda/activate.d/setup.sh
mkdir -p $CONDA_DIR/etc/conda/deactivate.d
echo "
unset RAMDISK_DIR
unset CONDA_DIR
unset CONDARC
unset HTTPS_PROXY
unset HTTP_PROXY
unset REQUESTS_CA_BUNDLE
unset BINSTAR_TOKEN
source ~/.bashrc" > $CONDA_DIR/etc/conda/deactivate.d/teardown.sh
# set up a condabuildrc file
echo "
export RAMDISK_DIR=$RAMDISK_DIR
export CONDA_DIR=$CONDA_DIR
export CONDARC=$RAMDISK_DIR/.condarc
export REQUESTS_CA_BUNDLE=/etc/certificates/ca_cs_nsls2_local.crt
export no_proxy=cs.nsls2.local
export HTTP_PROXY=http://proxy:8888
export HTTPS_PROXY=http://proxy:8888
export BINSTAR_TOKEN=ed-a09a18b1-8bce-4582-b02b-d43c27db57bd
" > "$RAMDISK_DIR/.condabuildrc"
# set up a custom condarc for the ramdisk env
echo "
channels:
- https://pergamon.cs.nsls2.local:8443/conda/nsls2-tag
- https://pergamon.cs.nsls2.local:8443/conda/nsls2
- https://pergamon.cs.nsls2.local:8443/conda/anaconda
always_yes: true
show_channel_urls: true" > "$RAMDISK_DIR/.condarc"

# Init the logs
LOG_DIR=/home/edill/auto-build-logs
DEV_DIR=$LOG_DIR/dev
TAG_DIR=$LOG_DIR/tag
mkdir -p $LOG_DIR
mkdir -p $DEV_DIR
mkdir -p $TAG_DIR

DATE=`date +%m.%d-%H.%M`
DEV_LOG="$DEV_DIR/$DATE"
TAG_LOG="$TAG_DIR/$DATE"

# init the conda directory
echo "CONDA_DIR=$CONDA_DIR"
source $CONDA_DIR/bin/activate $CONDA_DIR
conda install anaconda-client patchelf conda-build



# clean up conda-build and conda-build utils
set +e
# Remove conda installs
conda remove conda-build conda-build-all --yes

# Uninstall with pip a few times in case there are multiple versions
pip uninstall conda-build conda-build-all --yes
pip uninstall conda-build conda-build-all --yes
echo "Install a dev build of conda-build"
CONDA_BUILD_DIR=/tmp/$LOGNAME/conda-build
rm -rf $CONDA_BUILD_DIR
git clone https://github.com/conda/conda-build $CONDA_BUILD_DIR
cd $CONDA_BUILD_DIR
python setup.py develop
echo "Install a dev build of conda-build-all"
CONDA_BUILD_ALL_DIR=/tmp/$LOGNAME/conda-build-all
rm -rf $CONDA_BUILD_ALL_DIR
git clone https://github.com/SciTools/conda-build-all/ $CONDA_BUILD_ALL_DIR
cd $CONDA_BUILD_ALL_DIR
python setup.py develop

echo "Install conda 4.0.4"
CONDA_DIR=/tmp/$LOGNAME/conda
rm -rf $CONDA_DIR
git clone https://github.com/conda/conda $CONDA_DIR
cd $CONDA_DIR
git checkout 4.0.4
pip uninstall conda --yes
CONDA_DEFAULT_ENV='' python setup.py install

#rm -rf /tmp/conda-build
#git clone https://github.com/conda/conda-build /tmp/conda-build
#cd /tmp/conda-build
#python setup.py develop


run_dev_build () {
  # run the dev build
  echo `date`
  rm -rf /tmp/staged-recipes-dev
  CLONE_DIR=/tmp/$LOGNAME/staged-recipes-dev
  rm -rf $CLONE_DIR

  git clone https://github.com/NSLS-II/staged-recipes-dev $CLONE_DIR
  # allow failures on the conda-build commands
  set +e
  echo "========== Running py2 builds =========="
  for dir in $CLONE_DIR/py2/*
  do
    version="2.7"
    echo $dir
    CONDA_CMD="conda-build $dir --python=$version --numpy=1.10"
    echo "CONDA_CMD is --> $CONDA_CMD"
    # probably worth cleaning the lock every time
    conda clean --lock
    $CONDA_CMD && anaconda -t $BINSTAR_TOKEN upload -u nsls2-dev `$CONDA_CMD --output`
  done
  echo "========== Running py3 builds =========="
  for dir in $CLONE_DIR/py3/*
  do
    for version in 3.4 3.5
    do
      echo $dir
      CONDA_CMD="conda-build $dir --python=$version --numpy=1.10"
      echo "CONDA_CMD is --> $CONDA_CMD"
      # probably worth cleaning the lock every time
      conda clean --lock
      $CONDA_CMD && anaconda -t $BINSTAR_TOKEN upload -u nsls2-dev `$CONDA_CMD --output`
    done
  done
  echo "========== Running pyall builds =========="
  for dir in $CLONE_DIR/pyall/*
  do
    for version in 2.7 3.4 3.5
    do
      echo $dir
      CONDA_CMD="conda-build $dir --python=$version --numpy=1.10"
      echo "CONDA_CMD is --> $CONDA_CMD"
      # probably worth cleaning the lock every time
      conda clean --lock
      $CONDA_CMD && anaconda -t $BINSTAR_TOKEN upload -u nsls2-dev `$CONDA_CMD --output`
    done
  done

}


run_tag_build() {
  # run the tagged builds
  echo `date`
  TARGET=/tmp/tagged-recipes
  rm -rf $TARGET
  git clone https://github.com/NSLS-II/auto-build-tagged-recipes $TARGET
  #cd ../staged-recipes
  #conda-build-all /tmp/staged-recipes/recipes --upload-channels edill --matrix-conditions "python >=3.4" --inspect-channels nsls2
  # allow failures on the conda-build commands
  set +e
  conda-build-all $TARGET/py2 --upload-channels nsls2-tag --matrix-conditions "numpy >=1.10" "python >=2.7,<3" --inspect-channels nsls2-tag
  conda-build-all $TARGET/py3 --upload-channels nsls2-tag --matrix-conditions "numpy >=1.10" "python >=3.4" --inspect-channels nsls2-tag
  conda-build-all $TARGET/py35 --upload-channels nsls2-tag --matrix-conditions "numpy >=1.10" "python >=3.5" --inspect-channels nsls2-tag
  conda-build-all $TARGET/pyall --upload-channels nsls2-tag --matrix-conditions "numpy >=1.10" "python >=2.7,<3|>=3.4" --inspect-channels nsls2-tag
  conda-build-all $TARGET/skbeam-recipes --upload-channels nsls2-tag --matrix-conditions "numpy >=1.10" "python >=2.7,<3|>=3.4" --inspect-channels nsls2-tag
}
#LOG=/tmp/build.log
run_dev_build > $DEV_LOG 2>&1
run_tag_build > $TAG_LOG 2>&1

echo "Removing download trash from logs"
sed '/% |/d' $DEV_LOG > /tmp/devlog
sed '/% |/d' $TAG_LOG > /tmp/taglog

echo "Emailing logs"
echo "Build status for $DATE" | mutt -s "log test" edill@bnl.gov -y -a /tmp/devlog /tmp/taglog --
